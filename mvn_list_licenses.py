#!/usr/bin/env python
"""
List all dependencies (aggregated over sub-modules) from a Maven project.
Runs mvn license-download-licenses (can be skipped, if it has alread been run)
and collects all used module dependencies together with their licenses (if
found).
"""
import argparse
import functools
import logging
import os
import sys
import xml.etree.ElementTree as ElementTree

log = logging.getLogger(__name__)

def process_licenses_file(licenses_file):
    """
    Return all artifacts together with their license(s) from a
    `licenses.xml` file generated by the Maven license:download-licenses plugin.
    
    :return: a set of (:obj:`artifact`, [:obj:`license`, ...]) tuples, where the
      first element is the artifact and any following tuple elements hold the
      licenses that the artifact is licensed under.
    :rtype: :class:`set` of :class:`string` tuples.
    """
    module_licenses = set()
    tree = ElementTree.parse(licenses_file)
    root = tree.getroot()
    for dependency in root.iter('dependency'):
        group_id = dependency.find("groupId").text
        artifact_id = dependency.find("artifactId").text
        version = dependency.find("version").text
        licenses = [ license.text for license in dependency.findall("licenses/license/name") ]
        log.debug("%s:%s:%s -- %s", group_id, artifact_id, version, licenses)
        artifact = "%s:%s:%s" % (group_id, artifact_id, version)
        module_licenses.add(tuple([artifact] + licenses))
    return module_licenses

def main():
    logging.basicConfig(
        level=logging.INFO,
        format=("%(asctime)s [%(levelname)s] "
                "[%(threadName)s:%(name)s:%(funcName)s:%(lineno)d] "
                "%(message)s"),
        stream=sys.stdout)

    parser = argparse.ArgumentParser(description="List Maven project dependencies.")
    parser.add_argument("projectroot", metavar="<PROJECTDIR>", type=str, default=".",
                        help="Maven project root.")
    parser.add_argument("--skip-license-download", 
                        action="store_true", default=False,
                        help="Skip 'mvn license:download-licenses' " +
                        "(if already run).")        
    
    args = parser.parse_args()
    os.chdir(args.projectroot)
    if not args.skip_license_download:
        log.debug("downloading licenses ...")
        exitcode = os.system("mvn license:download-licenses")
        if exitcode != 0:
            log.error("failed to do download project licenses")
            return -1
    log.debug("processing licenses ...")
    
    module_licensesfiles = []
    for root, dirs, files in os.walk(args.projectroot):
        licensesfiles = filter(lambda f: f == "licenses.xml", files)
        rootappender = functools.partial(os.path.join, root)
        module_licensesfiles.extend(map(rootappender, licensesfiles))
        
    log.debug("license files: %s", "\n".join(module_licensesfiles))
    # set of (artifact, [licenses])
    licenses = set()
    for module_licenses_file in module_licensesfiles:
        log.debug("processing %s", module_licenses_file)        
        licenses.update(process_licenses_file(module_licenses_file))
    license_map = {}
    for license_tuple in licenses:
        (artifact), artifact_licenses = license_tuple[0], list(license_tuple[1:])
        license_map[artifact] = artifact_licenses
    for artifact in sorted(license_map.keys()):
        artifact_licenses = license_map[artifact]
        print "||",artifact,"||",",".join(artifact_licenses),"||"
                        

if __name__ == "__main__":
    sys.exit(main())
